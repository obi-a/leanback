= leanback

Simple Ruby Interface to CouchDB. 

--This project is still under development. Not complete by any means. I made this Gem to use in my projects. I will expose more CouchDB features soon.

==Goals
* To create a simple Ruby Interface to CouchDB
* Expose the features of CouchDB to the Ruby Lang., 
* Use a minimalist Ruby DSL to access CouchDB
* provide a very easy way to persist and retrieve data

==Install

 gem install leanback


==Usage

Require the leanback Gem
 require 'leanback'
 
Create a CouchDB database
 Couchdb.create 'contacts'
 # => {"ok"=>true}

Delete a database
 Couchdb.delete 'contacts'
 # => {"ok"=>true} 

Return a list of all Databases
 Couchdb.all
 # => ["maps", "inventory", "monitors", "contacts", "books"]

Create a new document
 data = {:firstname => 'Linda', 
         :lastname =>'smith', 
         :phone => '212-234-1234',
         :email =>'john@mail.com'}

 doc = {:database => 'contacts', :doc_id => 'Linda', :data => data}
 Document.create doc
 # => {"ok"=>true, "id"=>"Linda", "rev"=>"1-6f16274513f51e922ff1f745452a92b6"} 
This will create a new document in the 'contacts' database, with document id 'Linda'.

Lets edit that document to change the email address, phone number, and add a gender
 data = {:firstname => 'Linda', 
         :lastname =>'smith', 
         :email => 'linda@mail.com',
         :gender=>'female',
         :phone =>'718-245-5611',
         :_rev=>'1-6f16274513f51e922ff1f745452a92b6'}

 doc = {:database => 'contacts', :doc_id => 'Linda', :data => data}
 Document.edit doc
 # => {"ok"=>true, "id"=>"Linda", "rev"=>"2-e813a0e902e3ac114400ff3959a2adde"}

Retrieve/view the document 
 doc = {:database => 'contacts', :doc_id => 'Linda'}
 Couchdb.view doc
  #=> {"_id"=>"Linda", "_rev"=>"2-e813a0e902e3ac114400ff3959a2adde", "firstname"=>"Linda", 
                  "lastname"=>"smith", "email"=>"linda@mail.com", "gender"=>"female", "phone"=>"718-245-5611"} 

Delete the document
 doc = {:database => 'contacts', :doc_id => 'Linda', :rev => '2-e813a0e902e3ac114400ff3959a2adde'}
 Document.delete doc
 # => {"ok"=>true, "id"=>"Linda", "rev"=>"3-48580d1806983b32cb03f114efb064e3"} 

Retrieve all documents in a database
 docs = Couchdb.docs_from 'contacts'  
 docs.each do |d| 
  puts d["_rev"]
  puts d["_id"]    
  puts d["firstname"]
  puts d["lastname"]
  puts d["email"] 
  puts d["phone"]
 end  


===To Find documents by key
To find documents by email key (example: to find all contacts with email = 'nancy@mail.com')
 Couchdb.find_by( :database => 'contacts', :email => 'nancy@mail.com')  
 # => [{"_id"=>"Nancy", "_rev"=>"1-d15a83d2a23b495c19df2595b636ecc8", "firstname"=>"Nancy", "lastname"=>"Lee",
                   "phone"=>"347-808-3734", "email"=>"nancy@mail.com", "gender"=>"female"}]

To find all contacts with lastname = 'Smith'
 Couchdb.find_by( :database => 'contacts', :lastname => 'Smith')  
 # => [{"_id"=>"john", "_rev"=>"5-642689e0a50843d6fa508159a01b4fd4", "firstname"=>"John", "lastname"=>"Smith",
                   "email"=>"john@mail.com", "gender"=>"male"}]

To find all female contacts 
 Couchdb.find_by( :database => 'contacts', :gender => 'female') 
 # => [{"_id"=>"Nancy", "_rev"=>"1-d15a83d2a23b495c19df2595b636ecc8", "firstname"=>"Nancy", "lastname"=>"Lee",
                  "phone"=>"347-808-3734", "email"=>"nancy@mail.com", "gender"=>"female"}]


====How it works
The method
 Couchdb.find_by(:database => 'contacts', :email => 'nancy@mail.com')  
sends a
 GET http://127.0.0.1:5984/contacts/_design/email_finder/_view/find_by_email?key="nancy@mail.com"
This returns all contacts with email = 'nancy@mail.com'. Leanback will parse the native JSON results to return only the data values. If the design_document (_design/email_finder) and the view (find_by_email) doesn't exist, Leanback will create it in the database. See the source for the generated design_document;
 {
   "_id": "_design/email_finder",
   "_rev": "7-da7f3c0bf183f4a36a82013bd0ea6537",
   "language": "javascript",
   "views": {
       "find_by_email": {
           "map": "function(doc){
              if(doc.email)          
                  emit(doc.email,doc); 
                 }"
       }
   }
 }

If you ran 
 Couchdb.find_by( :database => 'contacts', :lastname => 'Smith')  
 Couchdb.find_by( :database => 'contacts', :gender => 'female') 
you will notice the following design_documents have been added to the database 
 _design/lastname_finder
 _design/gender_finder

====Usage
You can do 
  docs = Couchdb.find_by( :database => 'contacts', :email => 'nancy@mail.com')  
     docs.each do |d| 
 	puts d["_rev"]
 	puts d["_id"]    
 	puts d["firstname"]
 	puts d["lastname"]
 	puts d["email"] 
 	puts d["phone"]
    end

 # => rev1-d15a83d2a23b495c19df2595b636ecc8
      Nancy
      Nancy
      Lee
      nancy@mail.com
      347-808-3734

===Query a permanent view
 view = { :database => "contacts", :design_doc => 'my_views', :view => 'get_female_contacts'}
 Couchdb.find view 
 # => [{"_id"=>"Mary", "_rev"=>"5-bfcd67fd17dbb6a875af8f6dc497b15f", "firstname"=>"Mary", "lastname"=>"smith", 
                                         "phone"=>"212-234-1234", "email"=>"mary@mail.com", "gender"=>"female"}, 
 {"_id"=>"Nancy", "_rev"=>"1-d15a83d2a23b495c19df2595b636ecc8", "firstname"=>"Nancy", "lastname"=>"Lee", 
                                    "phone"=>"347-808-3734", "email"=>"nancy@mail.com", "gender"=>"female"}]

This is similar to sending a
 GET http://127.0.0.1:5984/[database]/_design/[design_doc]/_view/[view_name] 
For the above example
 GET http://127.0.0.1:5984/contacts/_design/my_views/_view/get_female_contacts
Leanback parses the native JSON results to return only the data values.

===Create a design document with permanent views:
First define the views in a JSON file 
 //my_views.json
 {
  "language" : "javascript",
  "views" :{
     "get_email" : {
       "map" : "function(doc){
          if(doc.lastname && doc.email)
            emit(doc.id,{Firstname: doc.firstname, Lastname: doc.lastname, Email: doc.email});
         }"
     }
  }
 }

Now create the design document and add the json file
 doc = { :database => 'contacts', :design_doc => 'more_views', :json_doc => '/path/to/my_views.json' }
 Couchdb.create_design doc 
 # => {"ok"=>true, "id"=>"_design/more_views", "rev"=>"1-d67ae97ff03a98f68ddc300bf9ae5048"}

To query the view
 view = { :database => "contacts", :design_doc => 'more_views', :view => 'get_email'}
 Couchdb.find view 
 # => [{"Firstname"=>"Nancy", "Lastname"=>"Lee", "Email"=>"nancy@mail.com"}, 
         {"Firstname"=>"john", "Lastname"=>"smith", "Email"=>"john@mail.com"}]


===Create View on the fly if it doesn't already exist 
(this will be deprecated in v0.2.3 when better error handling is added.Leanback will be raising Runtime errors instead of checking a hash for errors )
Let's say we want to query a view and create it on the fly if it doesn't already exist, and still return the values. In this example we will query the get_emails view (which returns emails of all contacts), if this view doesn't already exist it will be added to the database.

 def get_emails
  begin  
      docs = Couchdb.find(:database => "contacts", :design_doc => 'x_my_views', :view => 'get_emails') 
     rescue CouchdbException => e
       doc = { :database => 'contacts', :design_doc => 'my_views', :json_doc => '/path/to/my_views.json' }
       Couchdb.create_design doc
       docs = Couchdb.find(:database => "contacts", :design_doc => 'my_views', :view => 'get_emails')      
     end
  return docs
 end

 email_list = get_emails()
 puts email_list.inspect
 # => [{"Name"=>"Nancy", "Email"=>"nancy@mail.com"}, {"Name"=>"John", "Email"=>"john@mail.com"}]

In get_emails(), 
 docs = Couchdb.find(:database => "contacts", :design_doc => 'my_views', :view => 'get_emails') 
sends a request to the design_document (my_views) and view (get_emails). If this view is found in the database, it returns an Array with the name and email of all contacts:
  [{"Name"=>"Nancy", "Email"=>"nancy@mail.com"}, {"Name"=>"John", "Email"=>"john@mail.com"}]
if the view doesn't exist it raises a CouchdbException. We catch this exception 
  rescue CouchdbException => e
and then it creates design_doc and view 
  doc = { :database => 'contacts', :design_doc => 'my_views', :json_doc => '/path/to/my_views.json' }
  Couchdb.create_design doc
next it sends a request for the view again. 
   doc = { :database => 'contacts', :design_doc => 'my_views', :json_doc => '/path/to/my_views.json' }
   Couchdb.create_design doc
   docs = Couchdb.find(:database => "contacts", :design_doc => 'my_views', :view => 'get_emails')
Then it returns the email list
   return docs
So the first time the get_emails() method is called by an application the view is created on the fly and added to the database.

Source for the get_emails view:
 #my_views.json
 {
  "language" : "javascript",
  "views" :{
    "get_emails" : {
      "map" : "function(doc){
         if(doc.firstname && doc.email)
           emit(doc.id,{Name: doc.firstname, Email: doc.email});
        }"
    }
  }
 }


===Error handling
Attempting to create a database that already exists
  begin 	
   Couchdb.create 'contacts'
  rescue => e
   puts "Error message: " + e.to_s
   puts "Error value: " + e.error
  end 

 # => Error message: CouchDB: Error - file_exists. Reason - The database could not be created, the file already exists.
      Error value: file_exists


Attempting to delete a database that doesn't exist
  begin
    Couchdb.delete 'buildings'
  rescue CouchdbException => e
   puts "Error message: " + e.to_s
   puts "Error value: " + e.error
  end

 # => Error message: CouchDB: Error - not_found. Reason - missing
      Error value: not_found

Attempting to query a permanent view that doesn't exist
  begin
   view = { :database => "contacts", :design_doc => 'more_views', :view => 'get_user_email'}
   Couchdb.find view 
  rescue CouchdbException => e
   puts "Error message: " + e.to_s
   puts "Error value: " + e.error
  end 

 # => Error message: CouchDB: Error - not_found. Reason - missing_named_view
      Error value: not_found

When something goes wrong with a call to the database, Leanback will raise a CouchdbException. You can always check the information passed by the Exception. See example below:
  begin
   view = { :database => "contacts", :design_doc => 'more_views', :view => 'get_user_email'}
   Couchdb.find view 
  rescue CouchdbException => e
    if e.error == "not_found"
       doc = { :database => 'contacts', :design_doc => 'more_views', :json_doc => '/path/to/user_email.json' }
       Couchdb.create_design doc
       docs = Couchdb.find(:database => "contacts", :design_doc => 'more_views', :view => 'get_user_email')      
    end
  end 

In the code above the rescue block will create and request the permanent view if it's not found by the initial request outside the block. e.error is the value of the error returned by CouchDB.
  

===Bind Address
Leanback uses the default Couchdb bind address http://127.0.0.1:5984. To use a different bind address;
 Couchdb.address = '192.168.2.16'
 Couchdb.port = '6000'
 ...
 Document.address = '192.168.2.16'
 Document.port = '6000'
 

To change it back to default bind address at anytime, simply set the values to nil
 Couchdb.address = nil
 Couchdb.port = nil
 ...
 Document.address = nil
 Document.port = nil


== Copyright

Copyright (c) 2011 Obi Akubue. See LICENSE.txt for
further details.

